x <- list( a = 1:5, b = rnorm(10) )
x
lapply( x, mean )
x <- 1:4
lapply( x, runif )
?runif
x <- 1:4
lapply( x, runif, min = 0, max = 10 )
x <- list( a = matrix( 1:4, 2, 2 ), b = matrix( 1:6, 2, 3 ) )
x
lapply( x, function(e) e[,1] )
x <- 1:4
sapply( x, mean )
x <- list( a = 1:4, b = rnorm(100), c = runif(20) )
sapply( x, mean )
lapply( x, mean )
class( sapply( x, mean ) )
class( lapply( x, mean ) )
v <- sapply( x, mean )
v['a']
x <- matrix( rnorm(200), 20, 10 ) # A 20 rows X 10 cols matrix of random norm values
apply( x, 2, mean ) # apply mean to 2nd margin [cols] =  mean of each col
apply( x, 1, sum ) # apply a sum to the 1st margin [rows] = sum of each row
rowSums( x )
colMeans( x )
x <- matrix( rnorm(200), 20, 10 ) # A 20 rows X 10 cols matrix of random norm values
apply( x, 1, quantile, probs = c( 0.25, 0.75 ) )
a <- array( rnorm( 2, 2, 10 ), c( 2, 2, 10 ) )
a
a <- array( rnorm( 2, 2, 10 ), c( 2, 2, 10 ) )
apply( a, c(1,2), mean )
rowMeans( a, dims = 2 )
str(mapply)
args(mapply)
list( rep(1,4), rep(2,3), rep(3,2), rep(4,1) ) # Too tedius!
mapply( rep, 1:4, 4:1 )
noise <- function( n, mean, sd ) {
rnorm( n, mean, sd )
}
noise( 5, 1, 2 )
noise( 1:5, 1:5, 2 )
noise <- function( n, mean, sd ) {
mapply( rnorm, n, mean, sd )
}
noise( 1:5, 1:5, 2 )
noise <- function( n, mean, sd ) {
mapply( rnorm, n, mean, sd, SIMPLIFY = TRUE )
}
noise( 1:5, 1:5, 2 )
str(tapply)
x <- c( rnorm(10), runif(10), rnorm(10,1) )
x
f <- gl(3, 10)
f
tapply( x, f, mean )
str(gl)
?gl
tapply( x, f, mean, SIMPLIFY = FALSE )
tapply( x, f, mean, SIMPLIFY = TRUE )
tapply( x, f, mean, SIMPLIFY = FALSE )
x <- rnorm( 20, 5, 5 )
x
range(x)
str(split)
x <- c( rnorm(10), runif(10), rnorm(10,1) )
x
f <- gl( 3, 10 ) # generate 3 levels of 10 each
split( x, f )
lapply( split( x, f ), mean )
install.packageS("RMySQL")
install.packages("RMySQL")
fp <- "C:/Users/tfc64/Documents/GitHub/datasciencecoursera/r-programming/quiz1/hw1_data.csv"
df <- read.csv( fp )
df
head( df )
s <- split( df, df$Month )
s
length( s )
names( s )
s$5
s$`6`
lapply( s, function(x) colMeans( x[, c("Ozone", "Solar.R", "Wind") ] ) )
sapply( s, function(x) colMeans( x[, c("Ozone", "Solar.R", "Wind") ] ) )
r <- sapply( s, function(x) colMeans( x[, c("Ozone", "Solar.R", "Wind") ] ) )
r["Ozone","5"]
r["Solar.R","6"]
sapply( s, function(x) colMeans( x[, c("Ozone", "Solar.R", "Wind") ], na.rm = TRUE ) )
x <- rnorm( 10 )
gender <- gl( 2, 5 )
race <- gl( 5, 2 )
gender
race
interaction( f1, f2 )
interaction( gender, race )
str( split( x, list(gender, race) ) )
str( split( x, list(gender, race) ), drop = TRUE )
str( split( x, list(gender, race), drop = TRUE ) )
log(-1)
warning("Terrible indeed")
printmsg <- function(x) {
if (x > 0) {
print("positive")
} else {
print("<=0")
}
invisible(x)
}
printmsg(10)
printmsg(-1)
printmsg(NA)
printmsg <- function(x) {
if (is.na(x)) {
print("missing")
} else if (x > 0) {
print("positive")
} else {
print("<=0")
}
invisible(x)
}
printmsg(NA)
rm( list = ls() )
lm( y - x )
traceback()
options( error = recover )
read.csv("idontexist.csv")
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply( flags, class )
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply( flags, class )
sapply( flags, class )
cls_vect <- sapply( flags, class )
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply( flag_colors, sum )
sapply( flag_colors, sum )
lapply( flag_colors, mean )
sapply( flag_colors, mean )
flag_shapes <- flags[, 19:23]
lapply( flag_shapes, range )
shape_mat <- sapply( flag_shapes, range )
shape_mat
class( shape_mat )
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply( flags, unique )
unique_vals
sapply( unique_vals, length )
sapply( flags, unique )
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1)
)
0
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table( flags$landmass )
table(flags$animate)
tapply(flags$animate, flags$landmass, mean )
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
swirl()
library(datasets)
data(iris)
iris
r <- tapply( iris$Sepal.Length, iris$Species, mean )
r
sapply( r, round )
split( iris, iris$Species )
x <- numeric()
x
m <- matrix( 1:20, c(4,5) )
m
inverse(m)
invert(m)
solve(m)
m <- matrix( 1:25, c(5,5) )\
m <- matrix( 1:25, c(5,5) )
m
solve(m)
m <- matrix( runif( 25, 0, 5 ), c(5,5) )
solve(m)
m
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m2 <- makeCacheMatrix(m)
m2
m2.get()
m2['get']
m2['setmatrix'](m)
m2['setmatrix']
m2['set'](m)
m2['set']
cacheSolve(m2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- makeVector( c( 1:10 ) )
cachemean(x)
cachemean(x)
cachemean(x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m2 <- makeCacheMatrix(m)
cacheSolve(m2)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m2 <- makeCacheMatrix(m)
cacheSolve(m2)
debug( cacheSolve(m2) )
debug( cacheSolve )
cacheSolve(m2)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m2 <- makeCacheMatrix(m)
cacheSolve(m2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get     <- function() x
setmean <- function(me) m <<- me
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- makeVector( 1:10 )
cachemean(v)
cachemean(v)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m2 <- makeCacheMatrix(m)
cacheSolve(m2)
cacheSolve(m2)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m2 <- makeCacheMatrix(m)
cacheSolve(m2)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m2 <- makeCacheMatrix(m)
cacheSolve(m2)
cacheSolve(m2)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
a = "b5c282161816c77ccd67de4cd00de4646a0c81bd"
b = "b5c282161816c77ccd67de4cd00de4646a0c81bd"
a == b
a = "dd785600906bb764c58616b584dcad254161219c"
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
rpois( 10, 1 )
rpois( 10, 2 )
rpois( 10, 20 )
ppois( 2, 2 ) # Cumulative distribution
ppois( 4, 2 )
ppois( 6, 2 )
set.seed(20)
x <- rnorm(100)
e <- rnorm( 100, 0, 2 )
y <= 0.5 + 2 * x + e
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm( 100, 0, 2 )
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3
y <- rpois( 100, exp(log.mu))
log.mu <- 0.5 + 0.3*x
y <- rpois( 100, exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
sample( 1:10, 4 )
sample( 1:10, 4 )
sample( letters, 5 )
sample(1:10) ## Permutation
sample(1:10)
sample(1:10, replace = TRUE )
system.time( readLines("http://www.jhspu.edu") )
system.time( readLines("http://www.jhsph.edu") )
hilbert <- function(n) {
i <- i:n
1 / outer( i - 1, i, "+" )
}
x <- hilbert(1000)
hilbert <- function(n) {
i <- 1:n
1 / outer( i - 1, i, "+" )
}
x <- hilbert(1000)
system.time( svd(x) )
?svd
set.seed(1)
rpois(5,2)
?qpois
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
e
set.seed(10)
e <- rnorm(10, 0, 20)
e
y <- 0.5 + 2 * x + e
y
rbinom(n = 50)
rbinom(size=50)
rbinom(size=50, n=10)
rbinom(size=50, n=10, prob = 1)
rbinom(size=50, n=10, prob = 0.5)
rbinom(size=50, n=10, prob = 0.5)
rbinom(size=50, n=10, prob = 0.5)
rbinom(size=50, n=10, prob = 0.5)
rbinom(size=50, n=10, prob = 0.5)
rbinom(size=50, n=10, prob = 0.5)
rbinom(size=50, n=10, prob = 0.5)
rbinom(size=50, n=10, prob = 0.5)
rbinom(size=50, n=10, prob = 0.5)
rbinom(size=50, n=10, prob = 0.5)
rbinom(size=1, n=10, prob = 0.5)
rm( list = ls() )
library(datasets)
Rprof()
fit <- lm( y ~ x1 + x2 )
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
play()
tail( plants[,1:5], 8 )
nxt()
summar(plants)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE )
sample(1:6, 4, replace = TRUE )
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
sample( c(0,1), 100, replacement = TRUE, prob = c(0.3,0.7) )
sample( c(0,1), 100, replace = TRUE, prob = c(0.3,0.7) )
flips <- sample( c(0,1), 100, replace = TRUE, prob = c(0.3,0.7) )
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7 )
flips2 <- rbinom(100, size = 1, prob = 0.7 )
flips2
sum( flips2 )
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
my_pois <- replicate(100, rpois(5,10) )
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot( x = cars$speed, y = cars$dist )
plot( x = cars$dist, y = cars$speed )
plot( x = cars$dist, y = cars$speed, xlab = "Speed" )
plot( x = cars$speed, y = cars$dist, xlab = "Speed" )
plot( x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance" )
plot( x = cars$speed, y = cars$dist, ylab = "Stopping Distance" )
plot( x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance" )
plot( cars, main = "My Plot" )
plot( cars, main = "My Plot", sub = "My Plot Subtitle" )
plot( cars, sub = "My Plot Subtitle" )
plot( cars, col = 2 )
plot( cars, xlim = c(10,15) )
plot( cars, pch = 2 )
library(datasets)
data( mtcars )
?boxplot
boxplot( mpg ~ cyl, data = mtcars )
hist( mtcars$mpg )
swirl()
